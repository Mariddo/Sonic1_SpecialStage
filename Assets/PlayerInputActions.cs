//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""BonusStage"",
            ""id"": ""c58f8e80-2292-4ea5-a859-9bdd4fc1a8ac"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""ac7ec5c2-0d38-4a11-839a-9cb16c9e7935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""57883363-94dd-45bd-980b-894476acc300"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d8606edf-232e-486a-8f35-47a9c12d8047"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""478a4a5d-23ca-4b1d-998a-62d596cbc4db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5fc337ae-89bc-4b6b-9fc0-8eab7d65400b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""261a125f-f3de-4599-a092-65133952b812"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RegularGame"",
            ""id"": ""d1d8ed41-31f7-44ca-a355-4354ba040c45"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1b55112c-34e1-492c-844d-440718296554"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b573a86c-e0df-4ac8-a019-3077136ff6c7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        },
        {
            ""name"": ""Menu"",
            ""bindingGroup"": ""Menu"",
            ""devices"": []
        }
    ]
}");
        // BonusStage
        m_BonusStage = asset.FindActionMap("BonusStage", throwIfNotFound: true);
        m_BonusStage_Move = m_BonusStage.FindAction("Move", throwIfNotFound: true);
        m_BonusStage_Jump = m_BonusStage.FindAction("Jump", throwIfNotFound: true);
        // RegularGame
        m_RegularGame = asset.FindActionMap("RegularGame", throwIfNotFound: true);
        m_RegularGame_Newaction = m_RegularGame.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BonusStage
    private readonly InputActionMap m_BonusStage;
    private IBonusStageActions m_BonusStageActionsCallbackInterface;
    private readonly InputAction m_BonusStage_Move;
    private readonly InputAction m_BonusStage_Jump;
    public struct BonusStageActions
    {
        private @PlayerInputActions m_Wrapper;
        public BonusStageActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BonusStage_Move;
        public InputAction @Jump => m_Wrapper.m_BonusStage_Jump;
        public InputActionMap Get() { return m_Wrapper.m_BonusStage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BonusStageActions set) { return set.Get(); }
        public void SetCallbacks(IBonusStageActions instance)
        {
            if (m_Wrapper.m_BonusStageActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BonusStageActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_BonusStageActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public BonusStageActions @BonusStage => new BonusStageActions(this);

    // RegularGame
    private readonly InputActionMap m_RegularGame;
    private IRegularGameActions m_RegularGameActionsCallbackInterface;
    private readonly InputAction m_RegularGame_Newaction;
    public struct RegularGameActions
    {
        private @PlayerInputActions m_Wrapper;
        public RegularGameActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_RegularGame_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_RegularGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RegularGameActions set) { return set.Get(); }
        public void SetCallbacks(IRegularGameActions instance)
        {
            if (m_Wrapper.m_RegularGameActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_RegularGameActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_RegularGameActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_RegularGameActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_RegularGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public RegularGameActions @RegularGame => new RegularGameActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    private int m_MenuSchemeIndex = -1;
    public InputControlScheme MenuScheme
    {
        get
        {
            if (m_MenuSchemeIndex == -1) m_MenuSchemeIndex = asset.FindControlSchemeIndex("Menu");
            return asset.controlSchemes[m_MenuSchemeIndex];
        }
    }
    public interface IBonusStageActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IRegularGameActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
